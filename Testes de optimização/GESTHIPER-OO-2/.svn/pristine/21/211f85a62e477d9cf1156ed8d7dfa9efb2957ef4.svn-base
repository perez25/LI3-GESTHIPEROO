/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gesthiper.oo;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import static java.lang.Math.abs;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.TreeSet;

/**
 *
 * @author Perez_25
 */
public class Hipermercado implements Serializable {

    private Contabilidade cont;
    private Compras compras;
    private Catalogo_clientes ct_clientes;
    private Catalogo_produtos ct_produtos;
    private Dados_leitura dados_leitura;

    public Hipermercado() {
        this.ct_clientes = new Catalogo_clientes();
        this.ct_produtos = new Catalogo_produtos();
        this.compras = new Compras();
        this.cont = new Contabilidade();
        this.dados_leitura = new Dados_leitura();
    }
    /**
     * Responsável pela leitura do ficheiro de produtos
     * @param ficheiro
     * @return 
     */
    
    private Hipermercado le_produtos(String ficheiro) {
        String path = "/Users/Perez_25/Desktop/GESTHIPER-OO/src/gesthiper/oo/ficheiros/";

        BufferedReader br = null;
        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader(path + ficheiro));

            while ((sCurrentLine = br.readLine()) != null) {
                sCurrentLine = sCurrentLine.trim();
                Produto n = new Produto(sCurrentLine);
                this.ct_produtos.insert_produto(n);
                this.cont.init_cont_PROD(n);
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (br != null) {
                    br.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        return this;
    }
    /**
     * Responsável pela leitura do ficheiro de clientes
     * @param ficheiro
     * @return 
     */
    
    private Hipermercado le_clientes(String ficheiro) {
        String path = "/Users/Perez_25/Desktop/GESTHIPER-OO/src/gesthiper/oo/ficheiros/";
        BufferedReader br = null;
        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader(path + ficheiro));

            while ((sCurrentLine = br.readLine()) != null) {
                sCurrentLine = sCurrentLine.trim();
                Cliente n = new Cliente(sCurrentLine);
                this.ct_clientes.insert_cliente(n);
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (br != null) {
                    br.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        return this;
    }
    /**
     * Responsável pela leitura do ficheiro de compras
     * @param ficheiro
     * @return 
     */
    
    private Hipermercado le_compras(String ficheiro) {
        String path = "/Users/Perez_25/Desktop/GESTHIPER-OO/src/gesthiper/oo/ficheiros/";

        BufferedReader br = null;
        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader(path + ficheiro));

            while ((sCurrentLine = br.readLine()) != null) {
                String[] parts = sCurrentLine.split(" ");
                for (int i = 0; i < parts.length; i++) {
                    parts[i] = parts[i].trim();
                }
                Produto p = new Produto(parts[0]);
                Cliente c = new Cliente(parts[4]);

                if (this.ct_clientes.existeCliente(c) && this.ct_produtos.existeProduto(p)) {
                    this.dados_leitura.setTotal_compras(this.dados_leitura.getTotal_compras() + 1);
                    Unidade_Contabilidade uc = new Unidade_Contabilidade(p, Double.valueOf(parts[1]), parts[3].charAt(0),
                            Integer.valueOf(parts[5]), Integer.valueOf(parts[2]));
                    Compra n = new Compra(p, c, Integer.valueOf(parts[5]), Double.valueOf(parts[1]),
                            parts[3].charAt(0), Integer.valueOf(parts[2]));

                    this.cont.insert_cont(uc);
                    this.compras.insert_compra(n);
                } else {
                    this.dados_leitura.setTotal_compras_invalidas(this.dados_leitura.getTotal_compras_invalidas() + 1);
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (br != null) {
                    br.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

        return this;
    }
    /**
     * Responsável pelo tratamento dos ficheiros
     * @param produtos
     * @param clientes
     * @param compras
     * @return 
     */
    
    public Hipermercado leitura_de_ficheiros(String produtos, String clientes, String compras) {
        this.dados_leitura.setFicheiro_clientes(clientes);
        this.dados_leitura.setFicheiro_produtos(produtos);
        this.dados_leitura.setFicheiro_compras(compras);
        this.le_produtos(produtos);
        this.le_clientes(clientes);
        this.le_compras(compras);
        this.dados_leitura.setTotal_clientes_que_compraram(this.devolve_numero_total_de_clientes_que_compraram());
        this.dados_leitura.setTotal_produtos(this.devolve_numero_total_de_produtos());
        this.dados_leitura.setTotal_clientes(this.devolve_numero_total_de_clientes());
        this.dados_leitura.setTotal_clientes_que_compraram(this.devolve_numero_total_de_clientes_que_compraram());
        this.dados_leitura.setTotal_clientes_que_nao_compraram(this.devolve_numero_total_de_clientes_que_nao_compraram());
        this.dados_leitura.setTotal_compras_valor_zero(this.devolve_numero_total_de_compras_com_valor_zero());
        this.dados_leitura.setTotal_produtos_diferentes_comprados(this.devolve_numero_total_de_produtos_comprados());
        this.dados_leitura.setTotal_produtos_nao_comprados(this.devolve_numero_total_de_produtos_nao_comprados());
        this.dados_leitura.setFacturacao_total(this.devolve_facturacao_total());
        return this;
    }
    /**
     * Devolve os dados de leitura
     * @return Dados_leitura
     */
    
    public Dados_leitura getDados_leitura() {
        return this.dados_leitura.clone();
    }
    /**
     * insere uma compra
     * @param t 
     */
    
    public void insert_compra(Compra t) {
        this.compras.insert_compra(t);
    }
    /**
     * insere uma Unidade de Contabilidade
     * @param t 
     */
    
    public void insert_unidade_contabilidade(Unidade_Contabilidade t) {
        this.cont.insert_cont(t);
    }
    /**
     * Insere um produto no catálogo de produtos
     * @param p 
     */
    
    public void insert_produto_catalogo(Produto p) {
        this.ct_produtos.insert_produto(p);
    }
    /**
     * insere um cliente no catálogo de clientes
     * @param c 
     */
    
    public void insert_cliente_catalogo(Cliente c) {
        this.ct_clientes.insert_cliente(c);
    }
    /**
     * Verifica se um produto existe no catálogo de produtos
     * @param t
     * @return 
     */
    
    public boolean existe_produto_catalogo_produtos(Produto t) {
        return this.ct_produtos.existeProduto(t);
    }
    /**
     * Devolve o numero total de produtos inseridos
     * @return 
     */
    
    private int devolve_numero_total_de_produtos() {
        return this.ct_produtos.getNumerodeProdutos();
    }
    /**
     * Devolve o numero total de clientes inseridos
     *
     * @return 
     */
    private int devolve_numero_total_de_clientes() {
        return this.ct_clientes.getNumerodeClientes();
    }

    private int devolve_numero_total_de_clientes_que_nao_compraram() {
        return abs(this.devolve_numero_total_de_clientes() - this.devolve_numero_total_de_clientes_que_compraram());
    }

    private int devolve_numero_total_de_compras_com_valor_zero() {
        return this.compras.getTotal_de_compras_com_valor_zero();
    }

    private int devolve_numero_total_de_produtos_comprados() {
        return this.compras.getTotal_de_produtos_comprados();
    }

    private int devolve_numero_total_de_produtos_nao_comprados() {
        return this.devolve_numero_total_de_produtos() - this.devolve_numero_total_de_produtos_comprados();
    }

    private int devolve_numero_total_de_clientes_que_compraram() {
        return this.compras.getNumeroDeClientesQueCompraram();
    }

    private double devolve_facturacao_total() {
        return this.cont.facturacao_total();
    }

    public ArrayList<String> devolve_compras_mes_a_mes() {
        return this.compras.devolve_numero_compras_mes_a_mes();
    }

    public ArrayList<String> devolve_facturacao_total_por_mes() {
        return this.cont.devolve_facturacao_total_por_mes();

    }

    public ArrayList<String> devolve_clientes_que_compraram_mes() {
        return this.compras.devolve_numero_clientes_mes_a_mes_que_compraram();
    }

    public TreeSet<String> devolve_lista_de_produtos_nao_comprados() {
        return this.cont.devolve_produtos_nao_comprados();

    }

    public Hipermercado load_hipermercado(String nomeFicheiro) {
        Hipermercado res = new Hipermercado();
        String path = "/Users/Perez_25/Desktop/GESTHIPER-OO/src/gesthiper/oo/";
        try {
            try (ObjectInputStream input = new ObjectInputStream(new BufferedInputStream(
                    new FileInputStream(path + nomeFicheiro + ".obj")))) {
                res = (Hipermercado) input.readObject();
            }

        } catch (FileNotFoundException e) {
            System.err.println(e.getMessage());

        } catch (ClassNotFoundException | IOException e) {
            System.err.println(e.getMessage());

        }

        return res;
    }

    public boolean gravar_hipermercado(Hipermercado hiper, String nomeFicheiro) {
        String path = "/Users/Perez_25/Desktop/GESTHIPER-OO/src/gesthiper/oo/";
        boolean sucesso = false;

        while (!sucesso) {

            try {

                ObjectOutputStream oos = new ObjectOutputStream(
                        new BufferedOutputStream(new FileOutputStream(path + nomeFicheiro + ".obj")));
                oos.writeObject(hiper);
                oos.flush();
                oos.close();
                sucesso = true;
            } catch (FileNotFoundException e) {
                System.err.println(e.getMessage());
                e.printStackTrace();

            } catch (IOException e) {

                System.err.println(e.getMessage());
                e.printStackTrace();

            }
        }

        return true;
    }

    public TreeSet<String> devolve_lista_de_clientes_que_nao_compraram() {
        TreeSet<String> res = new TreeSet<>();
        HashMap<String, Cliente> lista_clientes = this.ct_clientes.getListaClientes();
        for (String cli : lista_clientes.keySet()) {
            if (!(this.compras.getCliente_compras().containsKey(cli))) {
                res.add(cli);
            }

        }

        return res;
    }

    public int devolve_numero_de_compras_em_certo_mes(int mes) {
        return this.compras.getNumero_Compras_By_Mes(mes - 1);
    }

    public TreeSet<String> devolve_lista_de_clientes_que_compraram_em_certo_mes(int mes) {
        return this.compras.getClientes_que_compraram_em_certo_mes(mes - 1);
    }

    public int devolve_numero_compras_mes_by_cliente(String cliente, int mes) {
        return this.compras.getNumero_Compras_cliente_mes(cliente, mes);
    }
    
    public int devolve_numero_produtos_comprados_by_cliente_mes(String cliente,int mes){
        return this.compras.getNumero_Produtos_cliente_mes(cliente, mes);
    }
    

}
